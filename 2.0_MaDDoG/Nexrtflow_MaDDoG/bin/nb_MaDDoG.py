
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/MaDDoG.ipynb
# %matplotlib inline

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
plt.style.use('default')
import os.path
from os import path

from matplotlib.patches import Rectangle
pd.set_option('mode.chained_assignment', None)

# figsize(11, 9)

import scipy.stats as stats
from scipy.stats import linregress
# from nb_20_Dogcatcher import *
from nb_30_MultiSwitchpoint import *

from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.datasets import make_blobs
from sklearn.preprocessing import StandardScaler
# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'  # or any {'0', '1', '2'}

### Make a conda environment for this with python 3.8
#pip3 install tensorflow--cpu==2.4.1
#pip3 install tensorflow_probability==0.12.1
# conda install -c conda-forge nb_conda_kernels
# conda install ipykernel

#pip3 install --user dbscan

import tensorflow.compat.v2 as tf
# print(tf.__version__)
tf.enable_v2_behavior()
import tensorflow_probability as tfp
from tensorflow_probability import distributions as tfd
# %matplotlib inline
import scipy.stats
#https://www.tensorflow.org/probability/examples/Multiple_changepoint_detection_and_Bayesian_model_selection

def runDoG(annotation_in,GeneRegion,RunDOG,DogGenePercCov,GeneRegionCoverageMin,
              InsideGeneSize,SlidingWindow,cpus,Comparison,
              wgs_path,sample_table,reads_window):
    Title = f"Region_{GeneRegion}_SlidingWindow_{SlidingWindow}_DogGenePercCov_{DogGenePercCov}"
    OutFolder=f"{Comparison}_{Title}"

    df_sample_table = pd.read_csv(sample_table,sep="\t")
    conditions = list(set(list(df_sample_table["condition"])))


#     DOGS = []
    df_final = pd.DataFrame()
    for fname in conditions:
        f1_plu = f"{wgs_path}/{fname}_plu.bed"
        f1_min = f"{wgs_path}/{fname}_min.bed"
        D = DOG(OutFolder=OutFolder, Title=Title, fname=fname, Annotation=annotation_in, f1_plu=f1_plu,
                f1_min=f1_min,cpus=cpus, RunDOG=RunDOG,SlidingWindow=SlidingWindow, DogGenePercCov=DogGenePercCov,
                GeneRegion=GeneRegion, GeneRegionCoverageMin=GeneRegionCoverageMin, InsideGeneSize=InsideGeneSize)
        D.df["fname"] = fname
        df_final = pd.concat([df_final,D.df],ignore_index=True)
#         DOGS.append((D.df.copy(),D.fname))
    df_final.to_csv(f"{OutFolder}/DOGS.csv",sep="\t")



def runMaDDoG(chrom, DOGOUT_PATH, max_num_states,
              bayes_factor_thresh,iterations,convolution_window):


    f_csv = f"{DOGOUT_PATH}/DOGS.csv"


    SwitchTitle = f"ConvolutionWindow_{convolution_window}_Iterations_{iterations}"

    df = pd.read_csv(f_csv,sep="\t")
    df = df[df["chr"]==chrom]
    print(f"working on {chrom} -------------")
    df_final = pd.DataFrame()
    for index, row in df.iterrows():
        P = runSwitchpoint(fname=row["fname"], row=row,
                convolution_window=convolution_window,iterations=iterations,max_num_states=6,
                           DOG_ALL="DOG",local_meta="local",bayes_factor_thresh=1.3)
        df_final = pd.concat([df_final,P.df_best_model],ignore_index=True)

    df_final.to_csv(f'ALL_BestModel_{chrom}.tsv',sep="\t",index=None)

    df_sp = ClusterSwitchpoints(df_input=df_final)
    del df["ALL_reads_local"]
    del df["ALL_reads_meta"]
    df_f, gtf_out = makeSwitchpointGTF(df_sp,df,SwitchTitle)


import argparse
def parse_arguments():
        parser = argparse.ArgumentParser(description='MaDDoG algorithm')
        parser.add_argument('--Comparison', action= 'store', metavar='Comparison')
        parser.add_argument('--annotation_in', action= 'store', metavar='annotation_in')
        parser.add_argument('--DOGCATCHER_ONLY', action= 'store', metavar='DOGCATCHER_ONLY',default=False)
        parser.add_argument('--MADDOG_ONLY', action= 'store', metavar='MADDOG_ONLY',default=False)
        parser.add_argument('--cpus', action= 'store', metavar='cpus',default=4)
        parser.add_argument('--GeneRegion', action= 'store', metavar='GeneRegion',default="WINDOW")
        parser.add_argument('--RunDOG', action= 'store', metavar='RunDOG',default=True)
        parser.add_argument('--DogGenePercCov', action= 'store', metavar='DogGenePercCov',default=1)
        parser.add_argument('--GeneRegionCoverageMin', action= 'store', metavar='GeneRegionCoverageMin',default=3)
        parser.add_argument('--InsideGeneSize', action= 'store', metavar='InsideGeneSize',default=1000)
        parser.add_argument('--SlidingWindow', action= 'store', metavar='SlidingWindow',default=5000)
        parser.add_argument('--reads_window', action= 'store', metavar='reads_window',default=50)
        parser.add_argument('--convolution_window', action= 'store', metavar='reads_window',default=10)
        parser.add_argument('--chrom', action= 'store', metavar='chrom')
        parser.add_argument('--DOGOUT_PATH', action= 'store', metavar='DOGOUT_PATH')
        parser.add_argument('--iterations', action= 'store', metavar='iterations',default=40)
        parser.add_argument('--max_num_states', action= 'store', metavar='max_num_states',default=6)
        parser.add_argument('--bayes_factor_thresh', action= 'store', metavar='bayes_factor_thresh',default=1.3)
        parser.add_argument('--OutFolder', action= 'store', metavar='OutFolder')
        parser.add_argument('--sample_table', action= 'store', metavar='sample_table')
        parser.add_argument('--wgs_path', action= 'store', metavar='wgs_path')
        args = parser.parse_args()
        return args

if __name__=="__main__":
    args = parse_arguments()
    annotation_in = args.annotation_in
    wgs_path = args.wgs_path
    sample_table = args.sample_table
    cpus = int(args.cpus)
    Comparison = args.Comparison
    GeneRegion = args.GeneRegion
    DOGCATCHER_ONLY = args.DOGCATCHER_ONLY
    chrom = args.chrom
    RunDOG = args.RunDOG
    DOGOUT_PATH = args.DOGOUT_PATH
    MADDOG_ONLY = args.MADDOG_ONLY

    if DOGCATCHER_ONLY == "True":
        DOGCATCHER_ONLY= True
    else:
        DOGCATCHER_ONLY = False

    if MADDOG_ONLY == "True":
        MADDOG_ONLY= True
    else:
        MADDOG_ONLY = False

    if RunDOG == "True":
        RunDOG = True
    else:
        RunDOG = False
    DogGenePercCov = int(args.DogGenePercCov)
    GeneRegionCoverageMin = int(args.GeneRegionCoverageMin)
    InsideGeneSize = int(args.InsideGeneSize)
    SlidingWindow = int(args.SlidingWindow)
    reads_window = int(args.reads_window)
    convolution_window = int(args.convolution_window)
    iterations = int(args.iterations)
    max_num_states = int(args.max_num_states)
    bayes_factor_thresh = float(args.bayes_factor_thresh)
    OutFolder = args.OutFolder

    if DOGCATCHER_ONLY:
        runDoG(annotation_in,GeneRegion,RunDOG,DogGenePercCov,GeneRegionCoverageMin,
              InsideGeneSize,SlidingWindow,cpus,Comparison,
              wgs_path,sample_table,reads_window)

    if MADDOG_ONLY:
        runMaDDoG(chrom, DOGOUT_PATH, max_num_states,
              bayes_factor_thresh,iterations,convolution_window)

